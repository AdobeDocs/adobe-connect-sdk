"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[8807],{11934:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return i},default:function(){return x}});var n,l=a(87462),m=a(63366),d=(a(15007),a(64983)),r=a(91515),o=["components"],i={},s=(n="CodeBlock",function(e){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),(0,d.mdx)("div",e)}),p={_frontmatter:i},u=r.Z;function x(e){var t=e.components,a=(0,m.Z)(e,o);return(0,d.mdx)(u,(0,l.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,d.mdx)("h1",{id:"sdk-references"},"SDK References"),(0,d.mdx)("p",null,"Read through the SDK methods, properties, and events. "),(0,d.mdx)("h2",{id:"methods"},"Methods"),(0,d.mdx)("details",null,(0,d.mdx)("summary",null,"allowParticipantPublish(`msgName`, `allowFlag`)"),"### allowParticipantPublish (`msgName`, `allowFlag`) **Available since**: 10.8 **Host Only** | This method will allow/block the participants from sending a sync event. | Param  | Type                | Description  | | ------ | ------------------- | ------------ | | msgName  | `string` | Name of the message for which the permission will be set | | allowFlag | `boolean` | If `true` then participants will be allowed     | **Returns**: `Void` #### Example:",(0,d.mdx)(s,{slots:"heading, code",languages:"JavaScript",mdxType:"CodeBlock"}),'#### allowParticipantPublish ```javascript customPodObject.allowParticipantPublish("name", true) ```'),(0,d.mdx)("h3",{id:"dispatchsyncmessage-msgname-msgvalue-isdelta-echoback"},"dispatchSyncMessage (",(0,d.mdx)("inlineCode",{parentName:"h3"},"msgName"),", ",(0,d.mdx)("inlineCode",{parentName:"h3"},"msgValue"),", ",(0,d.mdx)("inlineCode",{parentName:"h3"},"isDelta"),", ",(0,d.mdx)("inlineCode",{parentName:"h3"},"echoBack"),")"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Available since"),": 10.0"),(0,d.mdx)("p",null,"Method to send a sync message to other participants"),(0,d.mdx)("table",null,(0,d.mdx)("thead",{parentName:"table"},(0,d.mdx)("tr",{parentName:"thead"},(0,d.mdx)("th",{parentName:"tr",align:null},"Param"),(0,d.mdx)("th",{parentName:"tr",align:null},"Type"),(0,d.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,d.mdx)("tbody",{parentName:"table"},(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},"msgName"),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"string")),(0,d.mdx)("td",{parentName:"tr",align:null},"Name of the message to be sent -- should be meaningful to the pod running on other participant's machines")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},"msgValue"),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"object")),(0,d.mdx)("td",{parentName:"tr",align:null},"The contents of the message to be sent, the format to be determined by your own custom pod")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},"isDelta"),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"boolean")),(0,d.mdx)("td",{parentName:"tr",align:null},"If ",(0,d.mdx)("inlineCode",{parentName:"td"},"true"),", then all of the events matching this message name will be sent to new particpants. If ",(0,d.mdx)("inlineCode",{parentName:"td"},"false"),", then only the last known event will be sent.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},"echoBack"),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"boolean")),(0,d.mdx)("td",{parentName:"tr",align:null},"if ",(0,d.mdx)("inlineCode",{parentName:"td"},"true"),", then this instance of the custom pod will receive a corresponding sync message back, otherwise only the other participants will receive this message.")))),(0,d.mdx)("h4",{id:"example"},"Example:"),(0,d.mdx)(s,{slots:"heading, code",languages:"JavaScript",mdxType:"CodeBlock"}),(0,d.mdx)("h4",{id:"dispatchsyncmessage"},"dispatchSyncMessage"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},'customPodObject.dispatchSyncMessage("name", ["John"], true, true)\n')),(0,d.mdx)("h3",{id:"getbreakoutroomdetails-breakoutid"},"getBreakoutRoomDetails (",(0,d.mdx)("inlineCode",{parentName:"h3"},"breakoutId"),")"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Available since"),": 11.0"),(0,d.mdx)("p",null,"[Host Only Function]"," This method will return an object with information about a breakout room"),(0,d.mdx)("table",null,(0,d.mdx)("thead",{parentName:"table"},(0,d.mdx)("tr",{parentName:"thead"},(0,d.mdx)("th",{parentName:"tr",align:null},"Param"),(0,d.mdx)("th",{parentName:"tr",align:null},"Type"),(0,d.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,d.mdx)("tbody",{parentName:"table"},(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},"breakoutId"),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"number")),(0,d.mdx)("td",{parentName:"tr",align:null})))),(0,d.mdx)("h4",{id:"returns"},"Returns:"),(0,d.mdx)("p",null,(0,d.mdx)("inlineCode",{parentName:"p"},"Object"),": Object that has two values breakoutRoom id and breakout room name, returns null if participant calls this function"),(0,d.mdx)("h4",{id:"example-1"},"Example:"),(0,d.mdx)(s,{slots:"heading, code",languages:"JavaScript",mdxType:"CodeBlock"}),(0,d.mdx)("h4",{id:"getbreakoutroomdetails"},"getBreakoutRoomDetails"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"let borObj = customPodObject.getBreakoutRoomDetails(1)\nlet name = borObj.name\nlet id = borObj.id\n")),(0,d.mdx)("h3",{id:"getbreakoutroomslist-"},"getBreakoutRoomsList ()"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Available since"),": 11.0"),(0,d.mdx)("p",null,"[Host Only Function]"," This method will return the list of breakout rooms"),(0,d.mdx)("table",null,(0,d.mdx)("thead",{parentName:"table"},(0,d.mdx)("tr",{parentName:"thead"},(0,d.mdx)("th",{parentName:"tr",align:null},"Param"),(0,d.mdx)("th",{parentName:"tr",align:null},"Type"),(0,d.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,d.mdx)("tbody",{parentName:"table"},(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null}),(0,d.mdx)("td",{parentName:"tr",align:null}),(0,d.mdx)("td",{parentName:"tr",align:null})))),(0,d.mdx)("h4",{id:"returns-1"},"Returns:"),(0,d.mdx)("p",null,(0,d.mdx)("inlineCode",{parentName:"p"},"Array"),": Array that contains the list of breakout rooms object that contains room id and name, returns null if participant calls this function"),(0,d.mdx)("h4",{id:"example-2"},"Example:"),(0,d.mdx)(s,{slots:"heading, code",languages:"JavaScript",mdxType:"CodeBlock"}),(0,d.mdx)("h4",{id:"getbreakoutroomslist"},"getBreakoutRoomsList"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"let borList = customPodObject.getBreakoutRoomsList()\nlet room1Name = borList[0].name\nlet room1Id = borList[0].id\n")),(0,d.mdx)("h2",{id:"properties"},"Properties"),(0,d.mdx)("h2",{id:"events"},"Events"))}x.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-sdk-index-md-013e013df6c0f95bd059.js.map